# SPDX-FileCopyrightText: Â© 2024 Tiny Tapeout
# SPDX-License-Identifier: Apache-2.0

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import ClockCycles, FallingEdge, RisingEdge, Timer
from cocotb.utils import get_sim_time

from PIL import Image

async def do_start(dut, inputs = 0):
    dut._log.info("Start")

    # 36MHz clock
    clock = Clock(dut.clk, 27.778, units="ns")
    cocotb.start_soon(clock.start())

    dut.ena.value = 1
    dut.ui_in.value = inputs
    dut.uio_in.value = 0
    dut.rst_n.value = 1
    await ClockCycles(dut.clk, 2)

    # Reset
    dut._log.info("Reset")
    dut.rst_n.value = 0
    await ClockCycles(dut.clk, 2)

    dut.rst_n.value = 1

    assert dut.uio_oe.value == 0b10000000


async def audio_dump(dut, start):
    await do_start(dut, start)

    await ClockCycles(dut.clk, 5)
    assert dut.pwm.value == 1

    start_time = get_sim_time("us")
    
    sample_duration = 22
    last_pwm_state = 1
    last_sample_time = start_time
    last_edge_time = start_time
    high_time = 0
    samples = []


    while len(samples) < 1000:
        await FallingEdge(dut.pwm)
        cur_time = get_sim_time("us")
        while cur_time - last_sample_time >= sample_duration:
            high_time += last_sample_time + sample_duration - last_edge_time
            samples.append(int(1000 * high_time / sample_duration))
            dut.last_sample.value = samples[-1]
            high_time = 0
            last_sample_time += sample_duration
            #if len(samples) > 2:
            #    assert samples[-1] != samples[-2] or samples[-1] != samples[-3]
            last_edge_time = last_sample_time
        high_time += cur_time - last_edge_time
        
        await RisingEdge(dut.pwm)
        cur_time = get_sim_time("us")
        while cur_time - last_sample_time >= sample_duration:
            samples.append(int(1000 * high_time / sample_duration))
            dut.last_sample.value = samples[-1]
            high_time = 0
            last_sample_time += sample_duration
            #if len(samples) > 2:
            #    assert samples[-1] != samples[-2] or samples[-1] != samples[-3]

        last_edge_time = cur_time

    return samples

saved_samples = (
    [553, 614, 666, 695, 690, 665, 614, 604, 598, 629, 665, 672, 669, 640, 587, 539, 560, 595, 637, 666, 640, 599, 566, 521, 483, 472, 469, 476, 504, 492, 468, 449, 413, 395, 397, 373, 353, 344, 358, 371, 386, 347, 339, 333, 339, 351, 349, 364, 348, 340, 323, 339, 356, 375, 381, 396, 435, 453, 434, 389, 329, 372, 436, 502, 532, 531, 546, 527, 508, 499, 491, 520, 553, 560, 541, 525, 522, 532, 566, 606, 586, 529, 505, 482, 476, 499, 507, 507, 522, 524, 491, 472, 444, 438, 465, 479, 477, 457, 417, 397, 409, 426, 440, 454, 489, 497, 508, 515, 475, 450, 464, 479, 507, 558, 577, 584, 597, 613, 604, 539, 484, 438, 480, 570, 631, 664, 665, 645, 607, 578, 561, 551, 601, 609, 617, 594, 554, 492, 510, 541, 580, 602, 592, 542, 506, 469, 424, 411, 407, 407, 411, 436, 415, 397, 377, 362, 366, 354, 333, 313, 319, 340, 357, 373, 354, 364, 386, 404, 411, 407, 426, 420, 422, 439, 426, 440, 450, 476, 508, 542, 535, 499, 476, 491, 539, 589, 619, 608, 594, 604, 595, 589, 593, 618, 656, 644, 630, 597, 593, 606, 640, 675, 672, 657, 577, 542, 526, 527, 540, 534, 535, 529, 501, 460, 430, 428, 434, 471, 473, 460, 448, 410, 414, 429, 439, 439, 442, 458, 460, 455, 424, 381, 386, 400, 422, 449, 493, 497, 506, 518, 505, 446, 396, 351, 373, 455, 539, 583, 594, 587, 566, 529, 525, 529, 552, 609, 619, 602, 566, 528, 510, 544, 589, 604, 608, 584, 554, 537, 529, 488, 482, 498, 506, 509, 521, 505, 499, 506, 497, 477, 462, 445, 440, 472, 497, 516, 530, 534, 506, 510, 511, 494, 485, 499, 512, 535, 563, 580, 561, 565, 587, 593, 601, 568, 520, 523, 583, 648, 691, 671, 654, 651, 651, 643, 636, 648, 674, 691, 637, 599, 568, 595, 624, 667, 686, 674, 622, 553, 535, 521, 523, 527, 525, 520, 515, 461, 439, 435, 438, 440, 467, 448, 409, 361, 344, 348, 357, 362, 368, 397, 419, 400, 366, 311, 308, 315, 335, 354, 369, 398, 402, 417, 415, 376, 332, 291, 303, 367, 470, 545, 558, 547, 534, 487, 478, 479, 493, 520, 558, 542, 511, 507, 491, 525, 577, 597, 585, 572, 541, 510, 484, 456, 439, 449, 459, 467, 479, 483, 488, 496, 505, 467, 439, 415, 396, 397, 442, 458, 470, 473, 459, 458, 465, 458, 443, 449, 477, 494, 517, 534, 546, 536, 563, 569, 555, 551, 501, 492, 540, 604, 656, 642, 621, 606, 613, 616, 609, 623, 643, 660, 610, 553, 515, 506, 565, 606, 635, 630, 601, 514, 489, 473, 452, 458, 464, 453, 454, 411, 378, 371, 371, 376, 386, 401, 377, 347, 314, 323, 333, 339, 340, 345, 382, 406, 401, 381, 358, 369, 391, 425, 439, 453, 479, 492, 498, 488, 412, 381, 395, 453, 532, 650, 671, 660, 637, 619, 594, 550, 565, 592, 626, 637, 609, 587, 583, 619, 671, 680, 665, 628, 622, 590, 563, 549, 533, 505, 510, 510, 497, 498, 488, 491, 493, 487, 433, 407, 393, 392, 411, 455, 477, 481, 484, 471, 463, 444, 412, 393, 411, 430, 449, 462, 467, 455, 477, 489, 477, 448, 419, 392, 430, 497, 555, 549, 537, 523, 516, 538, 540, 558, 587, 608, 601, 541, 508, 503, 539, 607, 638, 638, 612, 565, 506, 493, 482, 473, 505, 517, 522, 515, 490, 462, 467, 478, 483, 489, 486, 469, 463, 473, 460, 474, 482, 487, 500, 551, 546, 526, 508, 493, 488, 505, 518, 526, 558, 589, 608, 606, 574, 485, 467, 518, 588, 651, 708, 704, 689, 675, 662, 651, 628, 650, 661, 678, 656, 622, 604, 626, 666, 702, 661, 630, 598, 597, 575, 564, 547, 534, 513, 512, 497, 473, 477, 478, 484, 488, 464, 420, 396, 386, 391, 411, 421, 421, 416, 391, 386, 378, 364, 349, 330, 363, 380, 387, 389, 373, 390, 400, 386, 347, 307, 290, 334, 406, 469, 492, 487, 476, 472, 476, 502, 511, 536, 560, 566, 501, 463, 438, 458, 518, 583, 608, 594, 565, 519, 491, 478, 463, 457, 479, 474, 470, 459, 413, 422, 444, 457, 454, 469, 464, 455, 453, 447, 435, 435, 436, 444, 462, 488, 470, 455, 454, 439, 464, 482, 489, 501, 540, 565, 568, 550, 490, 439, 484, 550, 618, 660, 679, 660, 642, 630, 617, 600, 613, 631, 632, 632, 599, 577, 585, 614, 646, 619, 580, 542, 528, 531, 520, 506, 497, 470, 465, 445, 414, 392, 414, 421, 428, 408, 358, 338, 327, 333, 348, 371, 390, 390, 387, 362, 356, 339, 323, 319, 344, 397, 429, 448, 457, 455, 472, 468, 434, 381, 358, 396, 467, 534, 584, 613, 573, 565, 587, 588, 614, 633, 654, 657, 630, 553, 522, 542, 585, 653, 691, 672, 643, 627, 607, 555, 539, 532, 537, 553, 545, 523, 507, 482, 479, 484, 479, 449, 456, 446, 448, 446, 434, 431, 433, 441, 455, 478, 484, 465, 458, 460, 441, 446, 449, 444, 449, 494, 494, 481, 426, 354, 388, 458, 520, 551, 568, 566, 549, 537, 530, 508, 521, 553, 564, 546, 547, 525, 534, 577, 622, 638, 587, 551, 522, 525, 527, 517, 507, 512, 488, 477, 459, 443, 449, 487, 496, 496, 493, 445, 428, 438, 454, 464, 494, 505, 511, 520, 527, 485, 464, 463, 478, 511, 554, 561, 565, 571, 585, 554, 520, 473, 435, 492, 563, 635, 674, 689, 681, 646, 623, 618, 634, 680, 704, 712, 693, 655, 600, 589, 625, 664, 713, 699, 664, 631, 611, 576, 539, 530, 531, 546, 559, 541, 515, 508, 488, 481, 474, 453, 421, 440, 439, 453, 465, 439, 426, 430, 431, 417, 414, 398, 380, 380, 369, 391, 402, 400, 391, 401, 426, 407, 356, 267, 291, 349, 407, 446, 455, 466, 472, 463, 464, 453, 463, 502, 525, 510, 483, 482, 483, 516, 568, 592, 544, 496, 463],
    [371, 496, 628, 739, 782, 786, 789, 746, 736, 767, 791, 795, 796, 777, 749, 727, 698, 699, 710, 715, 695, 674, 670, 671, 679, 627, 607, 595, 615, 594, 568, 541, 507, 459, 449, 412, 382, 354, 344, 337, 346, 319, 338, 354, 373, 397, 391, 404, 385, 381, 382, 388, 400, 404, 393, 401, 437, 457, 431, 361, 284, 314, 371, 440, 481, 490, 522, 507, 494, 491, 505, 541, 570, 558, 496, 427, 391, 415, 484, 583, 613, 580, 550, 517, 503, 520, 522, 518, 529, 544, 522, 512, 481, 455, 446, 430, 404, 384, 376, 407, 446, 482, 484, 477, 492, 482, 481, 479, 417, 397, 415, 438, 473, 526, 541, 536, 536, 547, 512, 469, 414, 353, 381, 441, 494, 520, 527, 506, 492, 494, 492, 492, 548, 571, 588, 569, 504, 440, 448, 483, 535, 577, 590, 554, 522, 489, 434, 422, 406, 387, 344, 318, 219, 143, 195, 260, 347, 404, 426, 421, 454, 472, 492, 513, 516, 493, 522, 547, 565, 560, 556, 522, 498, 491, 506, 527, 569, 619, 669, 691, 669, 619, 578, 595, 643, 703, 698, 670, 653, 648, 630, 602, 571, 584, 606, 622, 631, 618, 622, 645, 672, 712, 707, 698, 640, 595, 569, 558, 560, 544, 542, 534, 495, 436, 387, 371, 369, 412, 424, 425, 419, 390, 401, 425, 452, 460, 460, 455, 412, 338, 272, 279, 316, 392, 449, 493, 538, 530, 531, 539, 524, 454, 405, 371, 407, 500, 578, 603, 578, 542, 472, 468, 494, 537, 595, 662, 665, 624, 566, 502, 477, 507, 540, 551, 558, 542, 517, 505, 479, 429, 419, 431, 439, 442, 454, 422, 401, 359, 339, 334, 328, 325, 340, 390, 424, 452, 477, 485, 474, 482, 474, 440, 424, 440, 465, 511, 560, 592, 586, 582, 606, 607, 607, 554, 454, 382, 364, 415, 503, 587, 635, 689, 746, 751, 758, 781, 805, 824, 804, 720, 698, 744, 787, 829, 820, 776, 705, 607, 597, 608, 640, 678, 681, 666, 646, 606, 541, 532, 534, 528, 545, 512, 472, 426, 377, 356, 335, 325, 330, 370, 407, 416, 401, 343, 340, 347, 372, 398, 422, 455, 450, 454, 446, 387, 342, 296, 297, 345, 422, 487, 496, 488, 478, 455, 457, 462, 482, 518, 570, 564, 527, 498, 414, 415, 445, 500, 542, 567, 569, 556, 525, 495, 462, 468, 470, 472, 487, 503, 522, 546, 550, 491, 412, 361, 324, 337, 413, 465, 510, 522, 512, 472, 455, 433, 410, 412, 430, 441, 467, 489, 500, 501, 521, 512, 492, 484, 439, 428, 474, 523, 521, 507, 481, 462, 478, 499, 511, 536, 564, 595, 541, 515, 487, 478, 522, 549, 570, 570, 546, 497, 491, 489, 470, 478, 483, 477, 464, 395, 300, 226, 174, 157, 208, 299, 349, 382, 417, 428, 453, 464, 468, 479, 508, 532, 537, 549, 553, 535, 517, 523, 503, 503, 544, 582, 622, 641, 612, 520, 518, 559, 636, 743, 763, 746, 715, 690, 674, 611, 597, 597, 605, 601, 570, 561, 574, 628, 695, 713, 694, 657, 655, 633, 619, 606, 590, 549, 537, 525, 508, 505, 486, 467, 450, 408, 373, 353, 353, 363, 387, 436, 464, 478, 496, 497, 472, 421, 345, 286, 286, 333, 406, 458, 506, 505, 515, 517, 497, 465, 428, 398, 438, 518, 598, 620, 577, 536, 493, 479, 470, 498, 556, 619, 652, 594, 545, 515, 524, 579, 603, 601, 564, 494, 457, 450, 446, 435, 460, 460, 458, 449, 411, 398, 402, 393, 377, 362, 348, 325, 312, 332, 362, 391, 405, 425, 448, 511, 517, 497, 464, 413, 424, 448, 481, 507, 557, 602, 630, 626, 595, 520, 477, 494, 513, 510, 516, 491, 522, 582, 630, 683, 733, 748, 775, 796, 776, 751, 732, 753, 811, 861, 864, 796, 719, 681, 638, 616, 612, 637, 675, 669, 646, 608, 588, 578, 579, 580, 573, 515, 476, 455, 460, 470, 457, 431, 396, 342, 347, 356, 357, 358, 352, 377, 401, 412, 433, 428, 450, 458, 443, 386, 336, 313, 351, 419, 467, 454, 436, 417, 414, 426, 464, 481, 513, 544, 553, 499, 478, 457, 464, 495, 516, 502, 481, 480, 473, 503, 515, 507, 495, 506, 493, 483, 467, 421, 436, 476, 505, 511, 510, 478, 431, 389, 364, 385, 414, 459, 488, 505, 523, 474, 439, 414, 402, 422, 430, 436, 450, 499, 530, 530, 505, 411, 373, 422, 492, 554, 593, 595, 551, 516, 489, 436, 458, 500, 534, 547, 558, 532, 525, 544, 584, 609, 560, 518, 478, 472, 491, 501, 503, 510, 498, 488, 464, 443, 410, 399, 353, 267, 181, 154, 181, 246, 318, 376, 449, 483, 489, 505, 515, 491, 463, 450, 470, 507, 563, 588, 575, 545, 536, 527, 537, 540, 512, 505, 546, 598, 650, 693, 705, 693, 651, 670, 666, 691, 704, 714, 695, 643, 527, 486, 505, 561, 641, 694, 685, 657, 648, 633, 596, 588, 593, 599, 613, 590, 555, 529, 502, 489, 474, 453, 401, 398, 391, 402, 410, 399, 410, 416, 430, 457, 492, 502, 472, 435, 365, 325, 347, 381, 419, 464, 537, 539, 517, 458, 369, 400, 465, 525, 565, 605, 614, 606, 583, 540, 463, 459, 487, 516, 534, 571, 568, 580, 602, 622, 610, 558, 515, 478, 475, 474, 467, 465, 467, 441, 425, 397, 378, 389, 431, 440, 434, 389, 323, 299, 295, 308, 333, 380, 405, 421, 441, 444, 431, 426, 433, 441, 459, 492, 496, 508, 530, 561, 554, 537, 494, 460, 519, 598, 650, 660, 633, 513, 434, 430, 464, 546, 672, 739, 784, 779, 743, 734, 722, 755, 795, 847, 849, 828, 797, 762, 720, 631, 590, 588, 631, 669, 678, 664, 655, 636, 593, 566, 535, 508, 522, 522, 535, 544, 537, 491, 462, 439, 401, 379, 366, 352, 365, 371, 400, 406, 417, 410, 435, 476, 469, 429, 339, 343, 385, 430, 465, 469, 461, 445, 415, 405, 386, 421, 469, 501, 491, 466, 470, 483, 535, 584, 597, 506, 417, 347],
    [340, 390, 470, 568, 640, 722, 795, 820, 824, 857, 844, 824, 803, 777, 756, 731, 673, 659, 655, 676, 684, 678, 685, 681, 696, 689, 680, 685, 709, 704, 698, 690, 671, 643, 602, 568, 568, 566, 574, 570, 568, 558, 530, 532, 537, 574, 587, 643, 647, 638, 617, 599, 531, 506, 477, 462, 473, 481, 477, 470, 452, 410, 392, 381, 373, 374, 410, 415, 411, 412, 391, 409, 415, 407, 396, 402, 392, 368, 333, 299, 290, 297, 316, 332, 350, 393, 417, 424, 435, 405, 401, 391, 357, 339, 331, 319, 289, 251, 256, 265, 282, 306, 328, 356, 415, 426, 439, 446, 422, 430, 455, 469, 492, 540, 559, 566, 563, 545, 468, 415, 378, 330, 337, 374, 396, 435, 470, 501, 521, 546, 556, 556, 589, 575, 574, 565, 564, 535, 527, 517, 527, 558, 585, 594, 595, 585, 563, 503, 455, 411, 332, 304, 244, 190, 228, 271, 325, 406, 476, 545, 631, 672, 694, 708, 693, 672, 651, 602, 588, 580, 598, 588, 571, 553, 540, 503, 507, 529, 565, 618, 661, 694, 726, 729, 727, 717, 660, 627, 615, 606, 593, 570, 549, 539, 520, 532, 564, 595, 632, 666, 696, 726, 720, 729, 722, 671, 645, 625, 628, 595, 575, 547, 519, 488, 468, 458, 443, 456, 444, 428, 429, 399, 405, 415, 428, 436, 452, 465, 459, 444, 408, 373, 376, 369, 381, 392, 440, 440, 439, 431, 377, 351, 320, 294, 273, 299, 321, 347, 371, 373, 391, 405, 420, 429, 437, 473, 481, 482, 486, 460, 452, 446, 441, 443, 472, 503, 521, 544, 564, 570, 550, 542, 518, 490, 491, 459, 436, 422, 410, 435, 462, 500, 534, 587, 611, 628, 630, 621, 602, 558, 550, 541, 550, 570, 587, 599, 611, 623, 613, 583, 584, 564, 563, 544, 473, 426, 345, 323, 337, 382, 429, 484, 566, 617, 671, 705, 714, 741, 703, 672, 651, 653, 632, 624, 607, 607, 587, 558, 556, 551, 556, 570, 573, 580, 603, 621, 640, 635, 640, 629, 637, 595, 556, 511, 439, 397, 376, 375, 388, 437, 472, 502, 516, 550, 588, 598, 617, 627, 632, 636, 603, 564, 526, 449, 385, 351, 321, 325, 375, 422, 455, 473, 506, 486, 505, 511, 506, 508, 523, 521, 517, 539, 515, 489, 473, 455, 446, 469, 473, 476, 473, 476, 474, 478, 472, 465, 475, 478, 470, 463, 442, 416, 407, 420, 419, 425, 462, 468, 468, 462, 435, 421, 422, 417, 424, 438, 459, 454, 454, 454, 452, 460, 488, 500, 510, 542, 537, 516, 493, 422, 393, 377, 372, 376, 406, 434, 448, 462, 455, 452, 434, 426, 415, 408, 434, 435, 443, 451, 441, 455, 465, 474, 464, 471, 460, 431, 386, 329, 272, 231, 190, 160, 169, 226, 256, 267, 323, 366, 426, 473, 497, 539, 575, 593, 592, 595, 589, 580, 549, 566, 565, 569, 584, 568, 545, 529, 496, 487, 502, 522, 585, 679, 728, 772, 794, 797, 794, 767, 679, 647, 633, 635, 627, 651, 671, 703, 748, 775, 789, 807, 868, 872, 867, 852, 839, 800, 760, 662, 625, 610, 582, 566, 556, 556, 542, 532, 550, 555, 567, 601, 604, 597, 584, 571, 516, 492, 467, 441, 441, 424, 402, 374, 344, 351, 362, 377, 385, 407, 433, 429, 420, 378, 347, 333, 313, 305, 294, 316, 321, 321, 292, 299, 300, 303, 309, 311, 331, 356, 361, 371, 349, 353, 361, 368, 378, 387, 425, 440, 450, 454, 438, 421, 414, 390, 367, 369, 367, 358, 351, 335, 354, 381, 407, 443, 467, 529, 542, 553, 554, 558, 538, 544, 560, 582, 617, 641, 643, 623, 593, 526, 448, 397, 361, 344, 377, 385, 421, 498, 550, 594, 667, 690, 737, 789, 814, 833, 834, 819, 813, 794, 741, 717, 713, 739, 741, 739, 736, 731, 709, 660, 633, 623, 645, 659, 676, 702, 727, 760, 767, 748, 723, 703, 657, 622, 561, 525, 468, 458, 473, 497, 511, 545, 592, 601, 621, 628, 625, 577, 563, 522, 517, 502, 468, 453, 398, 381, 373, 375, 380, 390, 422, 420, 416, 405, 381, 373, 371, 354, 349, 361, 381, 397, 398, 367, 358, 353, 344, 343, 341, 362, 361, 377, 379, 378, 388, 397, 391, 381, 387, 371, 348, 294, 268, 261, 265, 279, 299, 325, 378, 393, 407, 409, 401, 416, 430, 434, 446, 479, 489, 493, 488, 460, 424, 402, 396, 410, 432, 464, 483, 502, 525, 516, 513, 520, 523, 529, 564, 573, 583, 582, 577, 551, 520, 518, 529, 559, 594, 623, 635, 652, 648, 604, 540, 501, 452, 419, 364, 310, 255, 246, 263, 328, 376, 416, 506, 561, 583, 613, 619, 623, 599, 574, 566, 559, 571, 575, 564, 558, 558, 531, 526, 522, 511, 525, 536, 549, 555, 585, 627, 637, 647, 691, 706, 720, 694, 672, 618, 578, 489, 468, 455, 463, 504, 555, 606, 652, 719, 746, 768, 761, 738, 723, 718, 690, 655, 627, 608, 565, 532, 513, 481, 485, 476, 458, 434, 387, 392, 404, 416, 435, 469, 503, 508, 512, 508, 460, 440, 426, 405, 387, 406, 395, 386, 350, 316, 308, 292, 301, 330, 371, 414, 433, 453, 437, 421, 410, 402, 391, 383, 422, 422, 430, 443, 423, 425, 435, 444, 459, 494, 517, 530, 540, 547, 523, 502, 492, 481, 471, 489, 479, 477, 487, 471, 477, 488, 497, 505, 531, 539, 537, 534, 534, 521, 510, 520, 526, 538, 560, 556, 556, 559, 571, 559, 573, 582, 585, 608, 601, 559, 511, 455, 380, 352, 325, 324, 382, 438, 484, 549, 589, 616, 662, 648, 665, 669, 695, 694, 694, 686, 678, 672, 616, 606, 592, 593, 611, 598, 592, 601, 609, 607, 606, 603, 604, 636, 643, 640, 631, 612, 564, 513, 494, 462, 455, 459, 455, 472, 489, 522, 554, 601, 607, 626, 650, 641, 609, 574, 493, 409, 363, 361, 371, 406, 452, 468, 501, 516, 501, 494, 498, 483, 485, 505, 505, 507, 510, 487, 463, 458, 453]
)

@cocotb.test()
async def test_audio(dut):

    for i in range(1, 4):
        samples = await audio_dump(dut, i)

        #print(samples)

        for j in range(len(samples)):
            assert abs(samples[j] - saved_samples[i-1][j]) <= 1


@cocotb.test()
async def test_sync(dut):
    await do_start(dut)

    dut._log.info("Test sync")

    await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    # First frame
    for i in range(600):
        for j in range(799):  # TODO This is wrong
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 1
            await ClockCycles(dut.clk, 1)
        for j in range(25):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    # Beginning second frame
    for i in range(25):
        for j in range(799):  # TODO This is wrong
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 1
            await ClockCycles(dut.clk, 1)
        for j in range(25):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

async def frame_dump(dut, frame, filename):
    await do_start(dut, frame << 3)

    await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    
    image = Image.new("RGB", (800, 600))

    for i in range(600):
        for j in range(800):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            red = dut.red.value * 85
            green = dut.green.value * 85
            blue = dut.blue.value * 85
            image.putpixel((j, i), (red, green, blue))
            await ClockCycles(dut.clk, 1)
        for j in range(24):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    image.save(filename)

@cocotb.test()
async def test_frames(dut):
    await frame_dump(dut,  2, "frame02.png")
    await frame_dump(dut,  4, "frame04.png")
    await frame_dump(dut,  8, "frame08.png")
    await frame_dump(dut, 12, "frame12.png")
    await frame_dump(dut, 13, "frame13.png")
    await frame_dump(dut, 14, "frame14.png")
    await frame_dump(dut, 16, "frame16.png")
    await frame_dump(dut, 17, "frame17.png")
    await frame_dump(dut, 18, "frame18.png")
    await frame_dump(dut, 19, "frame19.png")
    await frame_dump(dut, 20, "frame20.png")
    await frame_dump(dut, 23, "frame23.png")
    await frame_dump(dut, 24, "frame24.png")
    await frame_dump(dut, 28, "frame28.png")
